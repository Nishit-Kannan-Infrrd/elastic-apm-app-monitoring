version: '3.7'
services:
  db:
    image: postgres:11
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    #ports:
    #  - "5431:5432"
    networks:
      - backend
    volumes:
      - pg_apm_vol:/var/lib/postgresql/data
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: nishit@infrrd.ai
      PGADMIN_DEFAULT_PASSWORD: pgadmin
    ports:
      - "5430:80"
    networks:
      - backend
    volumes:
      - pgadmin_apm_vol:/var/lib/pgadmin
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
    restart: on-failure
    environment:
      - discovery.type=single-node
    volumes:
      - vol_es:/usr/share/elasticsearch/data
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'
    networks:
      - monitoring
  kibana:
    image: docker.elastic.co/kibana/kibana:7.4.0
    restart: on-failure
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status
    networks:
      - monitoring
    ports:
      - "5601:5601"
    links:
      - es:elasticsearch
    depends_on:
      - es
  apm:
    image: docker.elastic.co/apm/apm-server:7.4.0
    restart: on-failure
    depends_on:
      - es
      - kibana
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["es:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/
    networks:
      - monitoring
  library:
    build:
      context: ../.
      dockerfile: Dockerfile
      args:
        - "ARG_SERVICE_NAME=library"
        - "ARG_APM_SERVER_URL=http://localhost:8200"
        - "ARG_APPLICATION_PACKAGES=org.test"
        - "ARG_DATASOURCE_URL=jdbc:postgresql://127.0.0.1:5431/postgres"
        - "ARG_DB_USERNAME=postgres"
        - "ARG_DB_PASSWORD=postgres"
    image: libraryapp
    ports:
      - "8080:8080"
    depends_on:
      - db
      - apm
    environment:
      SERVICE_NAME: library
      APM_SERVER_URL: http://apm:8200
      APPLICATION_PACKAGES: com.crazynerve
      DATASOURCE_URL: jdbc:postgresql://db:5432/postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    networks:
      - monitoring
      - backend
volumes:
  pg_apm_vol:
  pgadmin_apm_vol:
  vol_es:
networks:
  backend:
  monitoring: